//========================================================================================
//============================== position related functions ==============================
//========================================================================================

proc rotateZ(){ local i
	c = cos($1)
	s = sin($1)
	forsec $o2.all {
		for i=0,n3d()-1 {
			x = x3d(i)
			y = y3d(i)
			xprime = x * c - y * s
			yprime = x * s + y * c
			pt3dchange(i, xprime, yprime, z3d(i), diam3d(i))
			pt3dstyle(0)
		}
	}
}

// shift cell location
proc position(){ local i
	$o4.soma x = x3d(0)
	$o4.soma y = y3d(0)
	$o4.soma z = z3d(0)
	$o4.soma for i=0,n3d()-1 {
		xloc = x3d(i)+$1-x
		yloc = y3d(i)+$2-y
		zloc = z3d(i)+$3-z
		diamval = diam3d(i)
		pt3dchange(i, xloc, yloc, zloc, diamval)
	}
	define_shape() // shifts all the other sections in line with somatic section
}

proc position2() { local i
	$o4.soma for i = 0, n3d()-1 { // ith point of number of 3d locations stored in the currently accessed section
		pt3dchange(i, $1+=x3d(i), $2+y3d(i), $3+z3d(i), diam3d(i)) // Change the ith 3-d point info, Returns the x/y/z coordinate of the ith point in the 3-d list of the currently accessed section.
	}
	define_shape()
}
// pt3dstyle() // use if visualization gets wee-woo

//========================================================================================
//=============================== intrinsic manipulations ================================
//========================================================================================

proc addTonicInhibition(){
	forsec $o1.somatic {
		insert tonic
		g_tonic = $2
		e_gaba_tonic = $3
	}
	forsec $o1.basal {
		insert tonic
		g_tonic = $2
		e_gaba_tonic = $3
	}
	if (strcmp($o1.cell_name, "HL23PN1") == 0){
		forsec $o1.apical {
			insert tonic
			g_tonic = $4
			e_gaba_tonic = $3
		}
	}
}

//========================================================================================
//============================== synapse related functions ===============================
//========================================================================================

// double siteVec[2]
proc createArtificialSyn() {local sitenum,OUni,i localobj sl, postcell, sref
	strdef treename
	postcell = $o2
	for(i=0;i<10;i+=1){
		
		if (i<5){
			treename = "dend"
			relpos = 0.5
			sl = postcell.locateSites(treename,relpos*postcell.getLongestBranch(treename))
			postcell.siteVec[0] = sl.o[i].x[0]
			postcell.siteVec[1] = sl.o[i].x[1]
		}else{
			if (strcmp(postcell.cell_name, "HL23PN1") != 0){
				// If not a pyramidal cell, stop at 5 OU processes
				break
			}
			treename = "apic"
			relpos = (i-5)*0.2 + 0.1 // [0.1, 0.3, 0.5, 0.7, 0.9]
			sl = postcell.locateSites(treename,relpos*postcell.getLongestBranch(treename))
			sitenum = int((sl.count()-1))
			postcell.siteVec[0] = sl.o[sitenum].x[0]
			postcell.siteVec[1] = sl.o[sitenum].x[1]
		}
		
		if (strcmp(treename, "dend") == 0){
			access postcell.dend[postcell.siteVec[0]]
			postcell.dend[postcell.siteVec[0]] sref = new SectionRef()
		}
		if (strcmp(treename, "apic") == 0){
			access postcell.apic[postcell.siteVec[0]]
			postcell.apic[postcell.siteVec[0]] sref = new SectionRef()
		}
		
		if (strcmp(postcell.cell_name, "HL23PN1") == 0){
			sref {
				postcell.OUprocess.append(new Gfluct2(postcell.siteVec[1]))
				OUni = postcell.OUprocess.count()-1 // OU object index
				// Set OU parameters
				postcell.OUprocess.o[OUni].E_e = 0// time constant of excitatory conductance
				postcell.OUprocess.o[OUni].E_i = -80 // time constant of inhibitory conductance
				postcell.OUprocess.o[OUni].g_e0 = 0.00003*exp(relpos) //0.001*exp(relpos) // average excitatory conductance
				postcell.OUprocess.o[OUni].g_i0 = 0//0.015*exp(relpos) // average inhibitory conductance
				postcell.OUprocess.o[OUni].tau_e = 65 // time constant of excitatory conductance
				postcell.OUprocess.o[OUni].tau_i = 20 // time constant of inhibitory conductance
				postcell.OUprocess.o[OUni].std_e = 0.00003*exp(relpos) //0.001*exp(relpos) // standard dev of excitatory conductance
				postcell.OUprocess.o[OUni].std_i = 0//0.015*exp(relpos) // standard dev of inhibitory conductance
				// OUprocess.o[OUni].new_seed($1*10+i) // This appears to not be threadsafe
				postcell.roulist.append(new Random($1*10+i))
				postcell.roulist.o[OUni].normal(0,1)
				postcell.OUprocess.o[OUni].noiseFromRandom(postcell.roulist.o[OUni])
			}
		}
		if (strcmp(postcell.cell_name, "HL23MN1") == 0){
			sref {
				postcell.OUprocess.append(new Gfluct2(postcell.siteVec[1]))
				OUni = postcell.OUprocess.count()-1 // OU object index
				// Set OU parameters
				postcell.OUprocess.o[OUni].E_e = 0// time constant of excitatory conductance
				postcell.OUprocess.o[OUni].E_i = -80 // time constant of inhibitory conductance
				postcell.OUprocess.o[OUni].g_e0 = 0.00005*exp(relpos) //0.002*exp(relpos) // average excitatory conductance
				postcell.OUprocess.o[OUni].g_i0 = 0//0.0375*exp(relpos) // average inhibitory conductance
				postcell.OUprocess.o[OUni].tau_e = 65 // time constant of excitatory conductance
				postcell.OUprocess.o[OUni].tau_i = 20 // time constant of inhibitory conductance
				postcell.OUprocess.o[OUni].std_e = 0.00005*exp(relpos) //0.002*exp(relpos) // standard dev of excitatory conductance
				postcell.OUprocess.o[OUni].std_i = 0//0.0375*exp(relpos) // standard dev of inhibitory conductance
				// OUprocess.o[OUni].new_seed($1*10+i) // This appears to not be threadsafe
				postcell.roulist.append(new Random($1*10+i))
				postcell.roulist.o[OUni].normal(0,1)
				postcell.OUprocess.o[OUni].noiseFromRandom(postcell.roulist.o[OUni])
			}
		}
		if (strcmp(postcell.cell_name, "HL23BN1") == 0){
			sref {
				postcell.OUprocess.append(new Gfluct2(postcell.siteVec[1]))
				OUni = postcell.OUprocess.count()-1 // OU object index
				// Set OU parameters
				postcell.OUprocess.o[OUni].E_e = 0// time constant of excitatory conductance
				postcell.OUprocess.o[OUni].E_i = -80 // time constant of inhibitory conductance
				postcell.OUprocess.o[OUni].g_e0 = 0.0009*exp(relpos) //0.008*exp(relpos) // average excitatory conductance
				postcell.OUprocess.o[OUni].g_i0 = 0//0.002*exp(relpos) // average inhibitory conductance
				postcell.OUprocess.o[OUni].tau_e = 65 // time constant of excitatory conductance
				postcell.OUprocess.o[OUni].tau_i = 20 // time constant of inhibitory conductance
				postcell.OUprocess.o[OUni].std_e = 0.0009*exp(relpos) //0.008*exp(relpos) // standard dev of excitatory conductance
				postcell.OUprocess.o[OUni].std_i = 0//0.002*exp(relpos) // standard dev of inhibitory conductance
				// OUprocess.o[OUni].new_seed($1*10+i) // This appears to not be threadsafe
				postcell.roulist.append(new Random($1*10+i))
				postcell.roulist.o[OUni].normal(0,1)
				postcell.OUprocess.o[OUni].noiseFromRandom(postcell.roulist.o[OUni])
			}
		}
		if (strcmp(postcell.cell_name, "HL23VN1") == 0){
			sref {
				postcell.OUprocess.append(new Gfluct2(postcell.siteVec[1]))
				OUni = postcell.OUprocess.count()-1 // OU object index
				// Set OU parameters
				postcell.OUprocess.o[OUni].E_e = 0// time constant of excitatory conductance
				postcell.OUprocess.o[OUni].E_i = -80 // time constant of inhibitory conductance
				postcell.OUprocess.o[OUni].g_e0 = 0.00015*exp(relpos) //0.001*exp(relpos) // average excitatory conductance
				postcell.OUprocess.o[OUni].g_i0 = 0//0.015*exp(relpos) // average inhibitory conductance
				postcell.OUprocess.o[OUni].tau_e = 65 // time constant of excitatory conductance
				postcell.OUprocess.o[OUni].tau_i = 20 // time constant of inhibitory conductance
				postcell.OUprocess.o[OUni].std_e = 0.00015*exp(relpos) //0.001*exp(relpos) // standard dev of excitatory conductance
				postcell.OUprocess.o[OUni].std_i = 0//0.015*exp(relpos) // standard dev of inhibitory conductance
				// OUprocess.o[OUni].new_seed($1*10+i) // This appears to not be threadsafe
				postcell.roulist.append(new Random($1*10+i))
				postcell.roulist.o[OUni].normal(0,1)
				postcell.OUprocess.o[OUni].noiseFromRandom(postcell.roulist.o[OUni])
			}
		}
	}
}

proc deleteSyn() { // input the presyn
	for (n=0;n<$o1.cons.count();n+=1){
		$o1.cons.o[n].weight = 0.0
	}
	$o1.cons.remove_all()
}

obfunc distributeSyn() {local sitenum,syni,preconi,i localobj sl,nilstim, sref
	$o5.synlist.remove_all()
	if ((strcmp($o1.cell_name, "HL23PN1") == 0)){
		EsynConductance = 0.000281
		NsynE = 3
		NsynI = 0
		if ((strcmp($o5.cell_name, "HL23MN1") == 0)){
			EsynConductance = 0.00042
			NsynE = 8
			NsynI = 0
		}
	}
	if (strcmp($o1.cell_name, "HL23MN1") == 0){
		IsynConductance = 0.00048
		NsynE = 0
		NsynI = 12
	}
	strdef treename
	for(n=0;n<(NsynE+NsynI);n+=1){
		if ($o5.rd1.repick()<$o5.pA){
			treename = "apic"
		} else {
			treename = "dend"
		}
		if (strcmp($o1.cell_name, "HL23MN1") == 0){
			treename = "apic"
		}
		sl = $o5.locateSites(treename,$o5.rd1.repick()*$o5.getLongestBranch(treename))
		sitenum = int((sl.count()-1)*$o5.rd1.repick())
		$o5.siteVec[0] = sl.o[sitenum].x[0]
		$o5.siteVec[1] = sl.o[sitenum].x[1]
		//print siteVec[0]
		
		if (strcmp(treename, "dend") == 0){
			access $o5.dend[$o5.siteVec[0]]
			$o5.dend[$o5.siteVec[0]] sref = new SectionRef()
		}
		if (strcmp(treename, "apic") == 0){
			access $o5.apic[$o5.siteVec[0]]
			$o5.apic[$o5.siteVec[0]] sref = new SectionRef()
		}
		
		if (n<NsynE){
			if ((strcmp($o5.cell_name, "HL23MN1") == 0)){
				sref {
				$o5.synlist.append(new ProbAMPANMDA($o5.siteVec[1]))
				syni = $o5.synlist.count()-1 //synapse index
				$o5.rList.append(new Random(int(1000000*$o5.rd1.repick())))
				$o5.rList.o[syni].negexp(1)
				$o5.synlist.o[syni].setRNG($o5.rList.o[syni])
				$o5.synlist.o[syni].tau_r_AMPA = 0.3
				$o5.synlist.o[syni].tau_d_AMPA = 3
				$o5.synlist.o[syni].tau_r_NMDA = 2
				$o5.synlist.o[syni].tau_d_NMDA = 65
				$o5.synlist.o[syni].e = 0
				$o5.synlist.o[syni].Dep = 140
				$o5.synlist.o[syni].Fac = 670
				$o5.synlist.o[syni].Use = 0.09
				$o5.synlist.o[syni].u0 = 0
				$o5.synlist.o[syni].gmax = EsynConductance
				
				access $o1.soma
				$o1.cons.append(new NetCon(&v(1), $o5.synlist.o[syni]))
				preconi = $o1.cons.count()-1 //connection index
				$o1.cons.o[preconi].threshold = $2
				$o1.cons.o[preconi].delay = $3
				$o1.cons.o[preconi].weight = $4
				}
			} else{
				sref {
				$o5.synlist.append(new ProbAMPANMDA($o5.siteVec[1]))
				syni = $o5.synlist.count()-1 //synapse index
				$o5.rList.append(new Random(int(1000000*$o5.rd1.repick())))
				$o5.rList.o[syni].negexp(1)
				$o5.synlist.o[syni].setRNG($o5.rList.o[syni])
				$o5.synlist.o[syni].tau_r_AMPA = 0.3
				$o5.synlist.o[syni].tau_d_AMPA = 3
				$o5.synlist.o[syni].tau_r_NMDA = 2
				$o5.synlist.o[syni].tau_d_NMDA = 65
				$o5.synlist.o[syni].e = 0
				$o5.synlist.o[syni].Dep = 670
				$o5.synlist.o[syni].Fac = 17
				$o5.synlist.o[syni].Use = 0.46
				$o5.synlist.o[syni].u0 = 0
				$o5.synlist.o[syni].gmax = EsynConductance
				
				access $o1.soma
				$o1.cons.append(new NetCon(&v(1), $o5.synlist.o[syni]))
				preconi = $o1.cons.count()-1 //connection index
				$o1.cons.o[preconi].threshold = $2
				$o1.cons.o[preconi].delay = $3
				$o1.cons.o[preconi].weight = $4
				}
			}
		} else {
			sref {
				$o5.synlist.append(new ProbUDFsyn($o5.siteVec[1]))
				syni = $o5.synlist.count()-1 //synapse index
				$o5.rList.append(new Random(int(1000000*$o5.rd1.repick())))
				$o5.rList.o[syni].negexp(1)
				$o5.synlist.o[syni].setRNG($o5.rList.o[syni])
				$o5.synlist.o[syni].tau_r = 1
				$o5.synlist.o[syni].tau_d = 10
				$o5.synlist.o[syni].e = -80
				$o5.synlist.o[syni].Dep = 1300
				$o5.synlist.o[syni].Fac = 2
				$o5.synlist.o[syni].Use = 0.3
				$o5.synlist.o[syni].u0 = 0
				$o5.synlist.o[syni].gmax = IsynConductance
	
				access $o1.soma
				$o1.cons.append(new NetCon(&v(1), $o5.synlist.o[syni]))
				preconi = $o1.cons.count()-1 //connection index
				$o1.cons.o[preconi].threshold = $2
				$o1.cons.o[preconi].delay = $3
				$o1.cons.o[preconi].weight = $4
			}
		}
	}
	return $o5.synlist
}

proc InitConnections(){local sitenum,syni,jj localobj sl, postcell, sref
	strdef treename,SynType,Target
	
	NumSyns = $1
	SynType = $s2
	Target = $s3
	synConductance = $4
	taur = $5
	taud = $6
	dep = $7
	fac = $8
	use = $9
	postcell = $o10
	
	if (strcmp("both",Target)==0){
		if (postcell.rd1.repick()<postcell.pA){
			treename = "apic"
		} else {
			treename = "dend"
		}
	} else {
		treename = Target
	}
	
	for(jj=0;jj<NumSyns;jj+=1){
		
		sl = postcell.locateSites(treename,postcell.rd1.repick()*postcell.getLongestBranch(treename))
		sitenum = int((sl.count()-1)*postcell.rd1.repick())
		
		postcell.siteVec[0] = sl.o[sitenum].x[0]
		postcell.siteVec[1] = sl.o[sitenum].x[1]
		
		if (strcmp(treename, "dend") == 0){
			access postcell.dend[postcell.siteVec[0]]
			postcell.dend[postcell.siteVec[0]] sref = new SectionRef()
		}
		if (strcmp(treename, "apic") == 0){
			access postcell.apic[postcell.siteVec[0]]
			postcell.apic[postcell.siteVec[0]] sref = new SectionRef()
		}
		
		if (strcmp("E",SynType)==0){
			sref {
				postcell.synlist.append(new ProbAMPANMDA(postcell.siteVec[1]))
				syni = postcell.synlist.count()-1 //synapse index
				postcell.rslist.append(new Random(int(1000000*postcell.rd1.repick())))
				postcell.rslist.o[syni].negexp(1)
				postcell.synlist.o[syni].setRNG(postcell.rslist.o[syni])
				postcell.synlist.o[syni].tau_r_AMPA = taur
				postcell.synlist.o[syni].tau_d_AMPA = taud
				postcell.synlist.o[syni].tau_r_NMDA = 2
				postcell.synlist.o[syni].tau_d_NMDA = 65
				postcell.synlist.o[syni].e = 0
				postcell.synlist.o[syni].Dep = dep
				postcell.synlist.o[syni].Fac = fac
				postcell.synlist.o[syni].Use = use
				postcell.synlist.o[syni].u0 = 0
				postcell.synlist.o[syni].gmax = synConductance
			}
		}
		if  (strcmp("I",SynType)==0){
			sref {
				postcell.synlist.append(new ProbUDFsyn(postcell.siteVec[1]))
				syni = postcell.synlist.count()-1 //synapse index
				postcell.rslist.append(new Random(int(1000000*postcell.rd1.repick())))
				postcell.rslist.o[syni].negexp(1)
				postcell.synlist.o[syni].setRNG(postcell.rslist.o[syni])
				postcell.synlist.o[syni].tau_r = taur
				postcell.synlist.o[syni].tau_d = taud
				postcell.synlist.o[syni].e = -80
				postcell.synlist.o[syni].Dep = dep
				postcell.synlist.o[syni].Fac = fac
				postcell.synlist.o[syni].Use = use
				postcell.synlist.o[syni].u0 = 0
				postcell.synlist.o[syni].gmax = synConductance
			}
		}
	}
}
